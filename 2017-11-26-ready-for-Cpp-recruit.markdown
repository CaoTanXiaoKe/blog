---
layout:     post
title:      "C++研发/后台开发，校招准备"
subtitle:   "C++研发/后台开发，校招准备"
date:       2017-11-26
author:     "ChenWenKe"
header-img: "img/Autumn-Bridge.jpg"
tags:
    - 校招
---

### 写在前面的话

在这篇博客中我不想涉及太多的C++后台开发的细节性知识点，因为这些东西太多太多，并且这些都是长期积累的过程，市面有很多经典书籍，项目，博客等资源。  

这篇博客只是我，作为校招过来人，斗胆为将要参加校招的同学，提供一些建议。**由于我自身知识，能力，视野的局限性，所以仅供参考。鄙陋欠缺之处，还望海涵**   


---

### You Can: 确立信念 
> 浅薄的人才相信运气和境遇，强者只相信因果。 
 —— 爱默生

在四月份的时候， 我面试了几家暑期实习，全部都折戟沉沙，铩羽而归。 当时的天空一度很灰暗；当时的春风真的很刺骨；当时的我，其实也怀疑过自己。。。


后来我慢慢开始坚信**命乃弱者之借口，运乃强者之谦辞。**把怀疑自己的时间，用来做反省和总结；用彷徨的时间，用来做规划；把找借口，去逃避的时间，用来去一往无前，，， 就这样，在正确的时间，幸运地做了正确的事。后来的一切都自然而然了，满世界的花都开了，连缺憾都变得温柔动人了。 

慢慢真切的体会到：信念是一种驱动力，它会让你为达成目标，绞尽脑汁，竭尽全力，甚至不择手段。 但如果你自怜自艾，你会沉浸于事物的消极面，对未来消极的预测会不动声色，冷酷无情地打击你的积极性。 没错，这是一种正反馈，欲强愈强，欲弱愈弱，并且经过时间的发酵，这种差距会愈加显著。   

---

### Nothing replaces hard work
> 瞽者善听，聋者善视。绝利一源，用师十倍。三返昼夜，用师万倍。 
—— 《阴符经》

我一直相信世界上没有免费的午餐，一切所谓的幸运，都是带着假面的必然。 一切的伪装，假面，表演最终会浮出水面。 

**但我也不太赞同天道酬勤，我只是坚信：Nothing replaces hard work.** 因为如果你在南辕北辙，或是在不停的迂回， 勤奋只是会让你错的更彻底，更离谱。而且会给你一个假象：我已经尽力了，至于成功不成功，随缘吧。尽人事，知天命。**聪明的你也一定明白：天道酬勤，勤能补拙的成立的前提条件是 —— 你在正确的方向上。**

其实面试或由人主观决定的一切事情，都需要你有突出的，明显的，可以区分的优势，这样你的获胜的概率才会很高。不然，你就是在掷骰子，把自己的命运拱手交给了一个最不靠谱的SB玩意儿——运气。 

把事情做的比大多数人都好，这往往是一个很严格的条件：你必须比大多数人都努力。 而且不仅仅需要努力学习相关的知识，而且需要努力的去反思，去检验，去改进，不仅把知识学的更全面，更深入，而且能融会贯通，能从点到面，能举一反三，不仅知识技能强悍，而且表达清晰，连贯，重点突出，层次分明。别人达到第一层，你就要去达到第三层，别人达到了第三层，你就去达到第十层，别人达到第十层，你就要去超神，，，反正就是要有很明显的区分度 —— 告诉面试官，你很优秀，而且优秀的无可置疑。

所以，要做一个勤奋的人：勤于规划，勤于动手，勤于反思，勤于总结，勤于思考。 

写了很多大道理，灌了很多鸡汤，下面给点干饭，，，


---

### 知识概括

> I don't know what works for you, but I can tell you what work for me. 

C++研发/后台开发主要包含这几个方面的知识点：
- 操作系统： 重点是进程，线程，IO多路复用, 线程同步，进程IPC, 虚拟内存，，，。推荐书籍《现代操作系统》《深入理解计算机系统》（需要反复看） 
- 计算机网络：重点是 TCP, 选项，状态，连接，断开，，，。推荐书籍：《计算机网络》(谢希仁)， 《Unix网络编程》（久负盛名的UNP，需要反复看）
- Linux 系统开发：重点其实是SHELL，gdb调试，操作系统以及一些API。 常用的SHELL：top, netstat, ipcs, find, file, readelf, sed, awk等。系统调用与普通函数调用，mmap函数，条件变量的用法， 文件结构等等， 推荐书籍：《SHELL脚本攻略》 《Unix环境高级编程》（久负盛名的APUE，值得反复看）。 
- C/C++: 推荐书籍《The C Programming Language》（值得反复看）, 《C++ Primer》(太厚，可以做浅显的字典)， 《Effective C++》(值得反复看)
- 算法： 《剑指Offer》, leetcode, 牛客网上的真题， 《算法导论》（厚且推理繁琐，特别适合做词典， 例如：DFS, 快速排序， 堆排序， 红黑树， B树讲的特别详细，清晰）。 
- 数据库： 数据库优化方法，数据库引擎，主键原理等。 


上面推荐的书籍比网上“C++后台开发书籍推荐”， “程序员必读书籍”， “C++书单”等推荐的书籍列表都短很多很多。 的确有很多经典书籍都没涵盖到，例如：《TCP/IP详解》，《深度探索c++对象模型》 《STL源码剖析》 《effective STL》  《c++的设计与演化》  等等。 原因有以下几条：

- 没有读过的书，不敢妄言。 
- 相比较与全面性，我更在乎可行性。—— 亲测可行（两年时间，大二和大三）。 
- 书籍虽然不多，但都是经典书籍，涉及的知识点很多，并且需要反复看，反复实践。  
- 上面的书单比较功利(实用)，一些重乎理念，着重于工程，设计，团队的书籍，单单就面试而言，性价比不是很高，没有被列出。 如：《代码大全》《人月神话》《极客与团队》《Unix编程艺术》等，这些书籍是软件工程领域里最最璀璨的星光，非常值得沐浴焚香，虔诚拜读。 


另外就是一些经典的问题，例如：C++里面的虚表结构， C++模板偏特化， 多进程和多线程的开销比较， shared_ptr 内部实现原理， volatile关键字与线程安全等等，这些书中没有涵盖的问题，需要在网上(google)深入搜索，认真准备。 

最后提醒一点： 看书要重乎理解，重乎实践，重乎融会贯通。

---

### Hard Work Is not Enough to Survive

**不可否认，在这个世界上，小聪明真的很有用，特别是以实力为底蕴的小聪明。**

下面介绍一些不能称为技巧的技巧， 由于这些“奇技淫巧”本身就是你努力/能力/思维的见证，所以与其说其是面试技巧，不如说其是“传声筒” —— 客观地向面试官介绍，证明你。 

#### More and Deeper
对问题的深入和拓展能力，往往是面试官非常看重的方面，它们反映出一个应聘者的核心竞争力 —— 思维力。 

深度要求我们要深入挖掘，某个特性的使用场景，实现原理， 以及为什么会这样设计，其他的设计方案的优缺点是什么，这样设计的好处是什么，设计方案之间是如何做权衡的。 

广度要求我们了解这个特性与其他特性的关联，同样的设计理念还有那些应用，相关联的设计理念有哪些。  

很显然，如果每个琐碎的特性，细节性的知识点都去深挖，都去拓展，有时候是很累很累的，容易让人陷入细节，而无法走出来，，，

**聪明的做法是：了解特性，把握重点，知其框架，然后细节问题会在实践中逐渐清晰**。

无论在哪一个领域，总有一些知识点比其他的更重要一些，二八定律是普遍存在的。 而对于这些重要的，会被频繁问到的知识点，理应得到我们更多的重视，精心的雕琢。它们最终会成为你面试中的闪光点，会让你在面试者中如同骄阳升起一样，让其他应聘者的星光都黯然失色。 
举个具体的例子来说，假如被问到：

> Q: 线程与进程的区别？<br/>
 A: 进程和线程其实都是OS中的逻辑流，由OS来分配，调度。每个进程都拥有一个独立的**虚拟地址空间**，进程间通信需要用到显式的**进程间IPC**, 对线程来说，一组线程共享同一份虚拟地址空间，相互之间通信往往比较容易， 但是往往需要对共享数据进行**同步**。

这是一份正确的回答，但是很显然，不够突出。

突出的回答至少应该是这样的： 

1. **数据共享，同步：** 多进程中由于每个进程都有一个独立的虚拟地址空间，所以数据共享复杂，需要使用显式的IPC;但是由于数据是分开的，所以同步简单。 同一组中的多个线程共用同一个虚拟地址空间，因此共享数据比较简单，但是也正是因为这个原因导致同步复杂。

2. **内存，CPU:** 多进程由于每个进程都有一个独立的页表，打开的文件描述符表结构等资源，所以占用的内存更多，切换复杂，CPU的利用率低。而多线程共享同一个页表， 打开的文件描述符表结构等资源，所以占用的内存较少，切换较简单，CPU的利用率较高。

3. **创建和销毁:** 由于进程占用的资源较多，所以创建，销毁，切换复杂，且执行这些操作的速度较慢。同理，线程执行这些操作的速度较快。

4. **编程和调试:** 多进程编程和调试简单。 多线程编程和调试复杂。

5. **可靠性:** 多进程中，一个进程宕掉，一般不会影响其他进程。多线程中一个线程宕掉，会导致整个线程组（整个进程）宕掉。

6. **分布式:** 多进程适应于多核，多机分布式；如果一台机器不够，扩展到多台机器比较简单。多线程适应于多核分布式，扩展到多台机器较复杂一些。


上面的回答中又牵涉许多重要的知识点：
虚拟地址空间，虚拟存储器机制，进程间IPC方式， 线程同步的方式，线程的存储器模型等。 

优秀的面试官往往就这样，从一个经典问题出发，不断的深入提问，拓展提问，从而考察应聘者是否真正的理解问题，是否会思考，会总结。 

优秀的(聪明的)应聘者不仅仅会理解问题，会思考，会总结，他们还会去搜集经典问题，去深入，去拓展，去认真的准备。

另外，事物之间的联系错综复杂，知识永无止境，上面的问题当然还可以更完善。 还可以回答可以从进程和线程是如何实现的，核心线程和用户线程的区别和联系， 为什么Unix/Linux要设计成轻进程的方式，为什么 Ngnix 设计成多进程的，为什么Windows更喜爱多线程，Windows的进程和Linux的进程实现方面不同的理念等方面展开阐述。 

---


#### Little Tricks

- 把握重点。 总有一些知识点更重要些，例如：C++里面的虚函数，虚表结构。OS：里面的虚拟存储器，进程与线程。计算机网络里的TCP, UDP。算法里面的快速排序，二叉树层次遍历等等。 可以通过做项目和在网上查看面经的方法，归纳重点。 
- 用心准备。 每个重要知识点，每一场面试（包括HR面）。  
- 证明自己。 面试中最难的往往不是面试本身，而是证明你的能力。证明你不是在夸夸其谈。一个小时左右的面试，并不能让面试官完全相信你的能力。 所以，**在线项目，github, 博客，手撕算法，，，**将成为非常有力的武器——它们会以毋庸置疑的语气证明你的实力。 
- 小黄鸭测试法。 不要想当然的认为你已经会了某一个知识点。例如：真的已经准备好自我介绍了吗？ 说出来，说给你的小黄鸭听一听，语气够自然吗？表达完整且清晰吗？突出了重点吗？。 能讲一下TCP三次握手过程吗？ 讲给你的小黄鸭听一下，，，
- 带节奏。高超的面试官往往会一个简单的经典问题切入，不断的深入的问下去。正如：问过线程与进程的区别，往往会问进程IPC, 线程同步方式一样。这些你都可以提前准备，引导面试官往下问，聪明的同学总是这样做的。
- 理论联系实际，脱颖而出。例如：在回答TCP的慢启动算法或UDP的用途的时候， 可以回答一下[为什么王者荣耀游戏选择UDP,而不是TCP](https://cloud.tencent.com/community/article/317298)。回答IO多路复用和多进程，多线程的区别时，可以比较一下 Apache服务器和Ngnix服务器等等。 

---

#### 愚拙即智慧
重剑无锋，大巧不工。 到最后发现： 
**最巧妙，智慧的技巧竟然是最容易理解的: Just do it.** ， **最笨的方法往往就是一个好方法。**  正如Unix设计思想里的：**不确定，就枚举** 一样。 我常悲哀地发现有很多聪明的朋友，把聪明都用在了寻找技巧上面，以至于他们从来不去“笨笨的”尝试一下。 诚然，成功也许真的有捷径，但捷径一定是在路途中被发现的，而不是在空想和YY中诞生的。 所以，Just Do It.  

> 空谈误国，实干兴邦  

> 年轻人最大的悲哀就是：太相信天赋，太相信方法论了。 <br/>
年轻人最大的遗憾就是：太不相信天赋，太不相信方法论了。 

---

### 彩蛋

抽空整理了一些，我在准备面试过程中记录的笔记(不完整)。 希望能对你有些微的帮助。 非常感谢你耐心地读完了这篇长博客，愿您所有的付出，都有回报。 Good Luck! 

- [计算机系统](https://github.com/CaoTanXiaoKe/CodingNotes/blob/master/CppSoftwareEngineer/systemPrograming.markdown)
- [计算机网络](https://github.com/CaoTanXiaoKe/CodingNotes/blob/master/CppSoftwareEngineer/networkPrograming.markdown)
- [Linux 命令](https://github.com/CaoTanXiaoKe/CodingNotes/blob/master/CppSoftwareEngineer/linuxCommand.markdown)
- [C++](https://github.com/CaoTanXiaoKe/CodingNotes/blob/master/CppSoftwareEngineer/Cplusplus.markdown)


<br/> 
最后，在准备面试的过程中，请不要忽视了关心你的人。 忙碌并不是冷漠的好理由 —— 因为冷漠从来没有好理由！
<br/>









