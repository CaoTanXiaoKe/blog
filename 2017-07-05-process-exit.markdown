---
layout:     post
title:      "Linux中exit函数和_Exit, _exit函数"
subtitle:   "进程的终止的方式，return, exit, _Exit, _exit, abort的区别"
date:       2017-07-05
author:     "ChenWenKe"
header-img: "img/post_csapp/vm.jpg"
tags:
    - Linux
    - OS
---

#### 进程终止
有 8 种方式使进程终止（termination）, 其中 5 种为正常终止，它们是：
(1) **从 main 返回;**
(2) **调用 exit;** 
(3) **调用 _exit 或 _Exit;** 
(4) 最后一个线程从启动例程返回；
(5) 从最后一个线程调用 pthread_exit; 

异常终止有三种方式，它们是：
(6) **调用 abort;** 
(7) **接到一个信号，该信号的行为是终止进程。** 
(8) 最后一个线程对取消请求做出响应。

#### 退出函数
3 个函数用于正常终止一个程序：_exit 和 _Exit 立即进入内核，exit则先执行一些清理处理，然后通过调用_exit返回内核。 

```c
#include<stdlib.h>
void exit(int status); 
void _Exit(int status); 
#include<unistd.h>
void _exit(int status); 
```
由于历史原因，exit 函数总是执行一个标准库 I/O 的清理关闭操作：对于所有打开流调用 fclose函数。 这造成输出缓冲中的所有数据都被冲洗（写到文件上）。 

3 个退出函数都有一个整形参数，称为终止状态（或退出状态，exit status）。大多数 UNIX 系统shell 都提供检查进程终止状态的方法。（如Linux中 `echo $?`） 如果(a) 调用这些函数时不带终止状态，或（b）main执行了一个无返回值的 return语句，或(c) main 没有声明返回类型的整型，则该进程的终止状态是未定义的。 但是，若 main 的返回类型是整形，并且 main 执行到最后一条语句时返回（隐式返回），那么该进程的终止状态是 0。

main函数返回一个整型值与该值调用 exit 是等价的。 于是在 main函数中 exit(0) 等价于 return(0);  

#### 进程终止详解
>
1. 在 main 函数内执行 return 语句。 这等效于调用 exit. 
2. 调用 exit 函数。此函数由 ISO C 定义，其操作包括调用各终止处理程序（终止处理程序在调用 atexit 函数时登记），然后关闭所有标准 I/O 流等。因为 ISO C 并不处理文件描述符，多进程（父进程和子进程）以及作业控制，所以这一定义对 Unix 系统而言是不完整的。 
3. 调用 _exit 或 _Exit 函数。 ISO C 定义 _Exit, 其目的是为了为进程提供一种无需运行终止处理程序或信号处理程序而终止的方法。对标准I/O流是否进行冲洗，这取决于实现。 在Unix系统中 _exit 和 _Exit 是同义的，并不冲洗标准I/O流。 _exit 函数由 exit 调用，它处理 Unix 系统特定的细节。_exit 是有 POSIX.1说明的。
4. 进程的最后一个线程在其启动例程中执行 return 语句。 但是，该线程的返回值不作为进程的返回值。当最后一个线程从其启动例程返回时，该进程以终止状态 0 返回。 
5. 进程的最后一个线程调用 pthread_exit 函数。如同前面一样，在这种情况中，进程终止状态总是0。这与传送给 pthread_exit 的参数无关。 
6. 异常终止 —— 调用 abort。 它产生 SIGABRT 信号，这是下一种异常终止的一种特例。 
7. 异常终止 —— 当进程接收到某些信号时。信号可由进程自身（如调用 abort函数），其他进程或内核产生。例如，若进程引用地址空间之外的存储单元，或者除以 0，内核就会为该进程产生相应的信号。 
8. 最后一个线程对“取消”（cancellation）请求做出响应。默认情况下，“取消”以延迟方式发生：一个线程要求取消另一个线程，若干时间之后，目标线程终止。 


> 不管进程如何终止，最后都会执行内核中的同一段代码。这段代码为相应进程关闭所有打开描述符，释放它所使用的存储器。 在任一种情况下，该终止进程的父进程都能使用 [wait 或 waitpid]() 函数取得其终止状态。 

<br/>
#### 参考资料

- 《Unix环境高级编程 3th》（APUE）11章-线程

<br/>
<br/>
