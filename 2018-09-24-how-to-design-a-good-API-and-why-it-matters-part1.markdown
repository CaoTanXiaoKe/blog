---
layout:     post
title:      "如何设计一个好的API[译文(一)]"
subtitle:   "How to desgin a good API and why it matters."
date:       2018-09-24
author:     "ChenWenKe"
tags:
    - 译文
    - 设计
    - 编程思想
---
[原文链接](https://courses.cs.washington.edu/courses/cse403/07wi/lectures/slides/bloch-how_to_design_a_good_api.pdf)

本文只是原文的部分翻译，如果英文勉强还可以，建议看原文。整个pdf都值得反反复复的阅读，思考，实践，总结，阅读，思考...周而复始的不断重读，但是碍于种种原因，本文只翻译了 **API设计的部分**。

---

## 如何设计一个好的API，为什么它非常重要。

### 为什么API设计很重要？
- API 可能会成为公司最大的资产之一。
    - API用户将会在API上付出很多，包括购买API，学习API的使用，和编写调用API的程序。 
    - 停止一个正在使用的API的代价往往是是难以承受的。 
    - 优秀的对外API能够帮助捕获用户。 
- API 也可能会成为公司最大的负债之一。
    - 糟糕的API会导致无尽的客服电话源源不断的打进来。
- 对外 API 是一个长远的活 —— 但，你只有一次机会把它做好。


### 为什么API设计对你重要?
- 如果你是程序员，你就是一个API设计者。
    - 好的代码应该是模块化的 —— 每一个模块都有一个 API。
- 有用的模块应该易于复用。
    - 一旦一个模块有了用户使用，再改变 API 就几乎不可能了。
    - 优秀的，易于复用的模块是企业的资产。
- 考虑通过 API 来提高代码的质量。 


### 一个优秀的API的特点
- 易于学习。
- 容易使用，甚至不用看文档就能使用。
- 很难被误用。
- 使用这个API的代码易于阅读和维护。 
- 非常契合需求。
- 容易扩展。
- 对用户友好。

### 概览
1. 设计API的过程
2. 一般原则
3. Class Design（末翻译）
4. Method Design（末翻译）
5. Exception Design（末翻译）
6. Refactoring API Designs（末翻译）

### 设计API的过程

#### 搜集需求 —— 保持适度的怀疑
- 一般情况下，你往往得到的是需求的答案，而不是需求本身。从需求本身出发，也许你能找到更好的解决方法。 
- 你要做的是要分析出真正的需求，并且用用例的方式表述出来。 
- 从需求本身出发，通常很容易找到问题更通用的解决方法，这样做的回报是很丰厚的。


### 从简短的说明文档开始 —— 一页纸就够了
- 在这个阶段，敏捷胜过完备。
- 尽可能的从更多的人那里获得反馈，认真听取的他们的意见，并且慎重对待他们的反馈。
- 如果你保持说明文档足够短，将会很便于修改。 
- 随着你自信心的增长，逐渐丰富你的文档。必要时可以引入代码。 

### 尽可能早的定义出API，并且时常调整。
- 在你编写API的实现之前，先定义好API。
    - 这样能节省你实现API的时间，如果你发现API定义的不好的话。
- 在你写API的详细说明文档之前，先定义好API。
    - 这样能节省你写详细说明文档的时间，如果你发现API定义的不好的话。
- 在你不断的丰富一个API时，持续的对其进行调整。
    - 这样能防止**烦人的意外情况** 发生。
    - 编码应该依附于示例和单元测试。 

### 编写服务提供者借口(SPI)更加重要
- 服务提供者接口（SPI）
    - 插件接口往往需要兼容多种插件的实现。
    - 举例： Java Cryptography Extension（JCE）
- 在接口发布之前，为接口编写多个插件。
    - 如果你只写一个，接口可能无法支持另一个插件。
    - 如果你只编写两个，接口可能在兼容更多插件时出现困难。
    - 如果你写三个，非常棒。
- Will Tracz 把这叫做“三的规则”(The Rule of Threes)

备注： SPI， JAVA中为厂商或插件提供的接口。


### 保持现实的期望
- 大多数API都设计的多度约束了(over-constrained)
    - 你永远无法让所有人都满意。
    - 你的目标应该是平等的让大家都可以接受。
- 现实世界很难预测，做好会犯错误的准备
    - 在现实世界中使用几年，原先设计的借口常常会被淘汰。
    - 做好更新(重新设计)你的API的准备。



