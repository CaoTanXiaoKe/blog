---
layout:     post
title:      "shared_ptr C++11 与资源管理"
subtitle:   "C++11 引入的 Shared_ptr 等智能指针十分巧妙的解决了一系列资源管理问题。"
date:       2017-03-24
author:     "ChenWenKe"
header-img: "img/post-bg-think-deeply.jpg"
tags:
    - C++
---

在 C++ 世界里， 最操蛋的事情之一就是你申请了一块动态内存，然后没有释放它，亦或是释放了多次，或者使用了指向已经释放了内存的指针（俗称野指针）。 卧槽，这些内存错误是如此的操蛋，导致很多人感觉C++真TM诡异，一不小心就背后捅刀子！
但是现在有了 智能指针这个事情已经好了很多了。虽然C++仍旧是种恐怖的语言，但也强悍到恐怖。 

`shared_ptr` 本来是 `boost` 库里面的智能指针，由于它非常好用，现已加入C++11套餐！ 
### `shared_ptr`定义

`shared_ptr`定义在`<memory>`头文件中，
本质上是个类，但是用起来像指针，和普通指针的区别是智能指针负责自动释放所指的对象（内存）shared_ptr允许多个指针指向同一个对象; (还有个unique_ptr智能指针“独占”其所指的对象)。 

C++ Primer 5th 中这样描述：
> 我们可以认为每个 `shared_ptr`都有一个关联的计数器，通常称其为引用计数(reference count)。无论何时我们拷贝一个 shared_ptr, 计数器都会递增。 例如，当用一个 shared_ptr 初始化另一个 shared_ptr，或将它作为参数传给一个函数以及作为函数的返回值时，它所关联的计数器就会递增。当我们给 shared_ptr 赋予一个新值或是 shared_ptr 被销毁（例如一个局部的 shared_ptr 离开其作用域时）时，计数器就会递减。一旦一个 shared_ptr 的计数器变为 0， 它就会自动释放自己所管理的对象。 

举例：
```cpp
#include <iostream>
#include <memory>
using namespace std;

int main()
{
    shared_ptr<int> ptr1 = make_shared<int>(999);	// 最好用 make_shared 初始化 shared_ptr 
    cout << ptr1.use_count() <<endl;	// 输出引用计数
    {
        shared_ptr<int> ptr2(ptr1);		// 计数 +1 
        cout << ptr2.use_count() << endl;	
    }	// ptr2作用域结束，被析构，计数 -1 

    auto ptr3(ptr1);	// 计数 +1 
    cout << ptr1.use_count() << endl;
    cout << ptr3.use_count() << endl;
    return 0;
}

输出：
1
2
2
2
```

### shared_ptr 自动销毁所管理的对象

```cpp
#include <iostream>
#include <memory>
#include <string>
using namespace std;

class Foo
{
public:
    Foo(int x = 0) : gg(x) { cout << "吼吼，猴王出世！" << endl; }
    const int getGg() const { return gg; }
    ~Foo()
    {
        cout << "哈哈，小样儿，被析构了吧！" << endl;
    }
private:
    int gg;
};

int main()
{
    {
        shared_ptr<string> ptr1 = make_shared<string>("Only talk is cheap!");
        cout << *ptr1 << endl;
    }   // 作用域结束 ptr1的析构函数会先调用 string 的析构函数把string对象析构掉，然后析构自己。

    // 空口无凭，试验一波 ~~~
   {
        shared_ptr<Foo> ptr2 = make_shared<Foo>(666);
        cout << ptr2->getGg() << endl;
   } // 作用域结束 ptr2的析构函数会先调用 Foo 的析构函数把 Foo对象析构掉，然后析构自己。

    cout << "古人诚不欺我，没骗你吧?" << endl;

    return 0;
}

输出：
Only talk is cheap!
吼吼，猴王出世！
666
哈哈，小样儿，被析构了吧！
古人诚不欺我，没骗你吧?
```

### 另外你还可以把 shared_ptr 存放于一个容器中：

```cpp
#include <iostream>
#include <memory>
#include <string>
#include <vector>
using namespace std;

int main()
{
    vector<shared_ptr<string>> srcMailBox;  // 用于存储管理邮件，收到邮件就放这里
    vector<shared_ptr<string>> readedMailBox;    //已读邮件
    vector<shared_ptr<string>> starMailBox;     // 加星标邮件
    // 收到某美铝程序员一封邮件
    srcMailBox.push_back(make_shared<string>("Love is now or never!")); 
    readedMailBox.push_back(srcMailBox[0]); // 弱恪（就是指本人）已读完了这封邮件
    starMailBox.push_back(readedMailBox[0]);    // 我给它加个星标
    cout << srcMailBox[0].use_count() << endl;  // 此处输出 3

    // 把邮件从 readedMialBox 移除
    readedMailBox.erase(readedMailBox.begin());	// 注意，erase 不会再次使用的 shared_ptr 
    cout << srcMailBox[0].use_count() << endl;  // 此处输出 2

    return 0;
}

输出：
3
2
```
由于只要资源还有 shared_ptr 指向它，它就不会被释放。 因此：
**如果你将 shared_ptr 存放于一个容器中，而后在这个容器中不再需要全部全部元素，而只使用其中一部分，要记得用erase删除不再需要的那些元素。**

另外，如果你是UML和设计模式的迷妹迷哥，没错，上面的代码很好的实现了**聚合(aggregation)**这种关系

### shared_ptr 还能和 new 一起使用

```cpp
#include <iostream>
#include <memory>
#include <string>
#include <vector>
using namespace std;

int main()
{
    auto strPtr1 = make_shared<string>("So High!");
    cout << *strPtr1 << endl;
    shared_ptr<string> strPtr2(new string("Say less, Do more!"));
    cout << *strPtr2 << endl;
    return 0;
}

```

### 不要混合使用 shared_ptr（以及其他智能指针）与 智能指针

```cpp
#include <iostream>
#include <memory>
using namespace std;

void process(shared_ptr<int> ptr)
{
    // 使用 ptr
}   // ptr 离开作用域，被销毁

int main()
{
    // 没问题
    shared_ptr<int> p(new int(42));     // 引用计数 1
    process(p);     // 拷贝 p 会递增它的引用计数；在 process 中引用计数值为 2
    int i = *p;     // 正确：引用计数值为 1

    // 有问题
    int *x(new int(1024));  // 危险：x 是一个普通指针，不是一个智能指针
    //process(x);     // 错误： 不能将 int* 转换为一个 shared_ptr<int>
    process(shared_ptr<int>(x));    // 合法的，但内存会被释放!
    int j = *x; // 未定义的： x 是一个空悬指针！

    return 0;
}

```

### 也不要使用 get 初始化另一个智能指针或为智能指针赋值

```cpp
#include <iostream>
#include <memory>
using namespace std;

int main()
{
    shared_ptr<int> p(new int(42));     // 引用计数为 1 
    int *q = p.get();   // 正确：但使用 q 时要注意，不要让它管理的指针被释放.
    {   // 新程序块
        // 未定义: 两个独立的 shared_ptr 指向相同的内存
        shared_ptr<int>(q); 
    }   // 程序块结束，q 被销毁, 它指向的内存被释放了
    int ooxx = *p;  // 去崩儿，p指向的内存已经被释放了

    return 0;
}

```

所以建议就是：**除非必要，只使用智能指针(shared_ptr, unique_ptr, weak_ptr), 这三个指针类已经几乎可以解决一切管理内存的问题了。** 但是有些函数库,例如关于操作系统的函数(APIs)。这种情况下，你不得不把一个智能指针传递给一个普通指针，这时需要非常小心，愿君珍重，阿门！ 

### shared_ptr 的 reset() 操作
```cpp
#include <iostream>
#include <memory>
using namespace std;

int main()
{
    shared_ptr<int> p(make_shared<int>(10));
//    p = new int(666);   // 哈哈，小芽儿，编译是通不过的！
    p.reset(new int(1024));     // 正确：和赋值类似，释放旧对象内存，指向新对象

    // 现在假设我们要更改 strPtr 指向的内容，但又不能影响其他shared_ptr使用原来资源。
    shared_ptr<string> strPtr(make_shared<string>("The closer you are, the less you see."));
    if (!strPtr.unique())   // 判断是否是唯一用户
    {
        strPtr.reset(new string(*strPtr)); // 不是唯一用户，分配新的拷贝
    }
    *strPtr += "\nNever let the truth in a way of a good story.";
    cout << *strPtr << endl;

    return 0;
}

输出：
The closer you are, the less you see.
Never let the truth in a way of a good story.
```

### `shared_ptr`在其他资源方面的应用

上面说的都是关于内存管理的，内存只是我们必须管理的资源之一啊。其他常见的资源还包括文件描述器(file descriptors), 互斥锁(mutex locks), 图形界面中的字型和笔刷，数据库连接，以及网络 sockets。不论哪一种资源，重要的是，当我们不再使用它时，必须将它还给系统。不然资源就被泄露掉了。 

下面是一个不能共用的互斥锁：即：同一个锁不能被拷贝多份。也就是说 `Lock`类**不允许复制**
同时要**保证申请了一个锁资源后，用完之后一定要释放掉它。** 至于后者可以用析构函数实现。

```cpp
class Lock{
public:
    explicit Lock(Mutex* pm) : mutexPtr(pm) // 声明成 explicit 禁止隐式转换
    {
        lock(mutexPtr);     // 获得资源
    }
    // 保证资源被使用的唯一性
    Lock(const Lock&) = delete;   // 禁止拷贝构造
    Lock& operator=(const Lock&) = delete; // 禁止拷贝赋值

    ~Lock() { unlock(mutexPtr); }   // 释放资源
private:
    Mutex *mutexPtr;
};

```

另外一种情况，当这个`Lock`类要求可以被复制时怎么办？
```cpp
class Lock{
public:
    explicit Lock(Mutex* pm) : mutexPtr(pm) // 声明成 explicit 禁止隐式转换
    {
        lock(mutexPtr);     // 获得资源
    }
    // 编译器会自动为我们生成 合成默认拷贝构造函数 和 合成默认拷贝复制函数

    ~Lock() { unlock(mutexPtr); }   // 释放资源
private:
    Mutex *mutexPtr;
};

// 然后我们这样调用


Lock ml1(&m); 	// 锁定 m
Lock ml2(ml1); 	// 将 ml1 复制到 ml2身上，卧槽！这将发生什么？
// ml1和ml2 任意一个作用域结束时，另一个就会"空悬", ml1 和 ml2同时过期时，m将两次被析构。 
```

怎么办？ 又不能**禁止复制**，又要**申请资源后一定要释放**，而且又不能一次申请，出现多次析构的问题。 用我一位南方室友的话说就是：好蓝啊！

聪明的朋友早已猜到(完全不需要用大脑)：`shared_ptr`

shared_ptr本身就是个类，它默认的析构函数是调用 `delete`. 我们可以通过给它传参让它调用我们自定义的函数作为析构函数的主题。

```cpp
class Lock 
{
public:
	explicit Lock(Mutex* pm) : mutexPtr(pm, unlock);	// 调用 unlock() 进行析构 
	{
		lock(mutexPtr.get());
	}
private:
	shared_ptr<Mutex> mutexPtr; 	// 使用 shared_ptr 替换 raw pointer(普通指针)
}

// 这下就解决问题了！真他妈酷！！！ 
```

另外，你是否感觉上面代码中 `explicit Lock(Mutex* pm) : mutexPtr(pm, unlock);`这种用法优点奇怪呢？ 
首先 mutexPtr 的类型是 shared_ptr<Mutex>，所以可以改换一下形式：`shared_ptr<Mutex> mutexPtr(pm, unlock)`, pm 是初始化 mutexPtr 的指针，unlock 是用于析构的 unlock函数。 但是函数怎么可以只传递函数名作为参数呢？ 啊哈！懂了吧。函数指针！再想想那些位于 `<algorithm>` 里面的函数。 

> 这几天老师刚好在讲《计算机操作系统》里的互斥锁，当时我就想到了 shared_ptr 的这种用法，今天在《Effictive C++》上果然看到了 shared_ptr的这种用法（Effictive C++书出的时候，C++11尚未出现，书里讲的是Boost 里的 Shared_ptr），和大师共鸣，窃喜了整整一个下午 ~_~。 ——> 啪！没出息！ 呸！你还差得远呢！ 

### 以独立语句将 new 出的对象置入智能指针

现在考虑一下这样一种情况：

```cpp
int priority();
void processWidget(shared_ptr<Widget> pw, int priority); 
```

现在考虑调用 processWidget:
```cpp
processWidget(shared_ptr<Widget>(new Widget), priority());	// 踌躇满志，老哥稳！
```
上面的代码竟然有可能泄露资源！ What? 虽然不可思议，但是事实就是如此！ 《Effective C++ 3th》中这样描述:
> 编译器产出一个 processWidget 调用码之前，必须首先核算即将被传递的各个实参。上述第二实参知识一个单纯的对`priority`函数的调用，但第一实参由两部分构成：
> - 执行 `"new Widget"` 表达式
- 调用 `shared_ptr` 构造函数
于是在调用`priority`之前，编译器必须创建代码，做一下三件事:
- 调用 `priority`
- 执行 `"new Widget"`
- 调用 'shared_ptr' 构造函数

> C++ 编译器以什么样的次序完成这些事情呢？弹性很大。... （如果）最终获得这样的操作序列：
1. 执行 `"new Widget"`
2. 调用 `priority`
3. 调用 `shared_ptr`构造函数

然后是 调用 priority 时发生了异常怎么办？ 卧槽！不会这么巧吧？如果就是这么巧呢？如果咱们编写的是控制中对美的导弹控制系统呢？
当然解决方案很简单,分开写就完事儿了嘛！ 
```cpp
// 在单独语句内以智能指针存储 newed 所得对象。
shared_ptr<Widget> pw(new Widget);		
processWidget(pw, priority());	// 这个调用绝不至于造成泄露
```
对 shared_ptr 的探讨就到这里吧，C++的操蛋之处就是对待某一特定问题，它可以用多种方式进行实现（通过编译并正常运行），但往往只有一种方式是最佳选择，这时其它所有的方式全都是干扰项，当然这也正式C++的魅力所在 —— 应对不同问题时，足够灵活。 所以少些抱怨，多些用心。 既要“治大国”又要“烹小鲜”，总要付出些代价哈。 


---

**PS:**
程序使用动态内存出于一下三种原因:
1. 程序不知道自己需要使用多少对象
2. 程序不知道所需对象的准确类型
3. 程序需要在多个对象间共享数据
<br/>

### 参考书籍
- 《C++ Primer 5th》
- 《Effectiv C++ 3th》
