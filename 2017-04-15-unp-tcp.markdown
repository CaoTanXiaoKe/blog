---
layout:     post
title:      "网络编程：TCP初探"
subtitle:   "TCP三路握手，TCP四路挥手，TCP状态转换，TCP建立和Socket函数的相应关系"
date:       2017-04-15
author:     "ChenWenKe"
header-img: "img/post_unp/tcp.jpg"
tags:
    - TCP/IP
    - 网络编程
---
## TCP 与 UDP 简述 


TCP 是一个传输字节流的面向连接的复杂协议。 TCP提供了连接，流量控制，拥塞控制，连接管理的功能。 

TCP 连接是**全双工的(full-duplex)**。这意味着在一个给定的连接上，应用可以在任何时刻在进出两个方向上既发送数据也接收数据。因此，TCP必须为每个数据流方向跟踪诸如序列号和通告大小等状态信息。 建立一个全双工连接后，需要的话可以把它转换成一个单工连接（调用 shutdown函数。）

UDP 可以是全双工的。 

### TCP 三次握手 与 套接字
1. 服务器必须准备好接受外来的连接。 这通常通过调用  socket, bind 和 listen 这三个函数来完成， 我们称之为**被动打开（passive open）**。 
2. 客户通过调用 connect 发起**主动打开（active open）**. 这导致客户 TCP 发送一个 SYN（同步）分节，它告诉服务器客户将在（待建立的）连接中发送的数据的初始序列号。 通常 SYN 分节不携带数据，其所在 IP数据报只含有一个 IP首部， 一个TCP首部及可能有的TCP选项。
3. 服务器必须确认（ACK）客户的 SYN, 同时自己也得发送一个 SYN 分节， 它含有服务器将在同一个连接中发送的初始序列号。服务器在单个分节中发送SYN和对客户SYN的ACK(确认)。
4. 客户必须确认服务器的 SYN.

这种交换至少需要 3 个分组， 因此称之为 TCP 的**三路握手（three-way handshake）**  

![TCP three-way handshake](/blog/img/post_unp/tcp_connect.PNG)


- TCP 选项中 MSS选项（maximum segment size）说明了它在本连接的每个TCP分节中愿意接受的最大数据量。 


### TCP 连接终止（四次挥手）
1. 某个应用进程首先调用 close, 我们称该端执行**主动关闭（active close）**, 该端的 TCP 于是发送一个 FIN 分节， 表示数据发送完毕。 
2. 接收到这个FIN的对端执行**被动关闭（passive close）**. 这个 FIN 由TCP确认。 它的接收也作为一个文件文件结束符（end-of-file）传递给接收端应用进程（放在已排队等候该应用进程接收的任何其他数据之后）， 因为 FIN 的接收意味着接收端应用进程在相应连接上再无额外数据可接收。 
3. 一段时间后， 接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN.
4. 接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN.

被动关闭端收到主动端的 ACK 主动端的TIME_WAIT会持续 2MSL(maximum segment lifetime，最长分节生命期)。 

**TIME_WAIT状态有两个存在的理由：**
- 可靠地实现TCP全双工连接的终止。 
- 允许老的重复分节在网络中消逝。 

既然每个方向都需要一个FIN和一个ACK，因此通常需要 4 个分节。 我们使用限定词“通常”是因为：某些情形下步骤1的FIN随数据一起发送；另外，步骤2和步骤3发送的分节都出自执行被动关闭那一端，有可能被合并成一个分节。 

![TCP four-way handshake](/blog/img/post_unp/tcp_close.PNG)

---

### TCP 状态转换图

![TCP state change](/blog/img/post_unp/tcp_state_change.PNG)


#### TCP 连接的分组交换

![TCP segment swap](/blog/img/post_unp/tcp_segment_swap.PNG)

#### 应用进程写 TCP 套接字时涉及的步骤和缓冲区

![proc TCP buffer](/blog/img/post_unp/tcp_proc_buffer.PNG)


#### 应用进程写 UDP 套接字时涉及的步骤与缓冲区

![proc UDP buffer](/blog/img/post_unp/udp_proc_buffer.PNG)


#### 基本 TCP 客户/服务器程序的套接字函数
![TCP B/S socket](/blog/img/post_unp/tcp_socket_connect.PNG)

### TCP 连接中的 socket 函数
- `int socket(int family, int type, int protocal)`: 指定期望的通信协议类型。返回：若成功则为非负描述符，若出错则为-1. 
- `int connect(int sockfd, const struct sockaddr* servaddr, socklen_t addrlen)`: TCP，客户用connect函数来建立与TCP服务器的连接。 返回：成功则为 0，若出错则为 -1.  
- `int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen)`: bind函数把一个本地协议赋予一个套接字。 绑定端口和ip. 返回：成功则为 0，若出错则为 -1.
- `int listen(int sockfd, int backlog)`: 把主动套接字转换为被动套接字，规定内核应该为相应套接字排队的最大连接个数。 返回：成功则为 0，若出错则为 -1.
- `int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)`: accept函数由TCP服务器调用，用于从已完成连接队列头返回下一个已完成连接。如果已完成连接队列为空，那么进程被投入睡眠（假定套接字为默认的阻塞方式）。返回：若成功则为非负描述符，若出错则为-1. 
- `int close(int sockfd)`: 通常的Unix close函数用来关闭套接字，并终止TCP连接。 返回：成功则为 0，若出错则为 -1.

### 端口
端口可以看做是操作系统的应用进程与远端另外的一个应用进程的交流窗口。 端口号被分为三段：
- 众所周知的端口号：0 ~ 1023。例如：Web服务器：80， 邮件服务器：25， FTP:21, SSH:22, Telnet:23, TFTP是UDP端口69.
- 已登记的端口号： 1024 ~ 49151
- 动态或私有端口： 49152 ~ 65536 (491652是 65536 的四分之三)。 

### wait() VS waitpid()

```cpp
#include <sys/wait.h>
pid_t wait(int *statloc);
pid_t waitpid(pid_t pid, int *statloc, int options); 
```
- waitpid在尚有未终止的子进程在运行时可以不阻塞，而wait却不能在循环中调用。 




### I/O复用：select 和 poll 函数
网络编程中的输入一般都分为两步：
1. 等待数据准备好；
2. 从内核向进程复制数据；
对于一个套接字上的操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。
第二步就是把数据从内核缓冲区复制到应用缓冲区。

#### I/O 阻塞模型

![blocking I/O](/blog/img/post_unp/IO_blocking.PNG)

#### I/O 复用模型

![I/O multiplexing](/blog/img/post_unp/IO_multiplexing.PNG)

#### select， pselect 与 poll
- **select 函数**，该函数允许进程指示内核等待多个事件中的任何一个发生， 并只有一个或多个事件发生或经历一段指定的时间后才唤醒它。 
也就是说，我们调用select告知内核对哪些描述符（就读，写或异常条件）感兴趣以及等待多长时间。 我们感兴趣的描述符不局限于套接字，任何描述符都可以使用select来测试。  

使用 select函数 需要注意两点 1）. 有个传入参数是最大描述符号 **+1** 2）. 由于该函数三个集合参数都是：值-结果方式， 描述符集合在返回时均被清 0.  

- **pselect 函数**， pselect函数和select函数相比，不仅有更高的时间分辨率，而且可以处理信号阻塞。 

- **poll 函数**，poll函数提供的功能与 select 类似，不过在处理流设备时，它能提供额外的信息。 poll识别三类数据：普通，优先级带和高优先级。另外，poll函数没有使用：值-结果的参数，描述符集合不会在函数返回时清 0， 另外，结构数组的元素数目由调用者控制，无需最大描述符。

#### shutdown函数
终止网络连接的通常方法是调用close函数。 不过close有两个限制，却可以用 shutdown函数 来避免。 
1. close把描述符的引用计数减一，描述符的引用计数减到 0 时，才会发送 FIN. 
2. close终止读和写两个方向上的传输。 

如果我们以批量方式运行用select编写的回射客户程序，发现即使到用户输入的结尾，仍可能有数据处于去往或来自服务器的管道中。处理这种情形要求使用shutdown函数，这使我们能够用上TCP的半关闭特性。 

