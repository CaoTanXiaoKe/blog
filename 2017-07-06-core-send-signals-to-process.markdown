---
layout:     post
title:      "内核是如何发送信号到应用进程的"
subtitle:   "异常：中断，故障。进程上下文切换，发送信号，接收信号"
date:       2017-07-06
author:     "ChenWenKe"
header-img: "img/post_csapp/vm.jpg"
tags:
    - Linux
    - OS
---


**信号:** 一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件。
> 官方的解释是 A signal is an asynchronous notification sent to a process or to a specific thread within the same process in order to notify it of an event that occurred。

每种信号类型都对应于某种系统事件。低层的硬件异常是由内核异常处理程序处理的，正常情况下，对用户进程而言是不可见的。 信号提供了一种机制，通知用户进程发生了这些异常。 

#### 简单解释
简单来说， 信号是在上下文切换时，内核通过设置目的进程 PCB 里一个位向量 pending 中的某一个二进制位传送给目的进程的。 而进程的上下文切换是通过异常控制流实现的 —— 中断和系统调用。比如在分配给某个进程的时间片用完时，就需要切换到内核态。这时就可以去设置目的进程的 pending 位向量，从而向该进程发信号。 当内核从一个异常处理程序返回，准备将控制传递给目的进程时，它首先会检查该进程的 pending &~blocking（标记阻塞的信号） 是否为空，如果不为空, 取一个信号进行处理（默认处理，或者运行相应的信号处理程序）。 

#### 详细解释
发送信号到目的进程是由两个步骤组成的：
1. 发送信号。 **内核通过更新目的进程上下文中的某个状态，发送（递送）一个信号给目的进程。** 发送信号可以有如下两个原因（1）. 内核检测到一个系统事件，比如被零除错误或者子进程终止。 （2）. 一个进程调用了 kill 函数。 显式地要求内核发送一个信号给目的进程。一个进程可以发送信号给它自己。 

2. 接收信号。 当目的进程被内核强迫以某种方式对信号的发送做出反应时，目的进程就接收了信号。进程可以忽略这个信号，终止或者通过执行一个称为信号处理程序的用户层函数捕获这个信号。

 一个只发出而没有被接收的信号叫做待处理信号（pending signal）。在任何时刻, 一种类型至多有一个待处理信号。 内核为每个进程在 pending 位向量中维护着待处理信号的集合，而在 blocked 位向量中维护着被阻塞的信号集合。只要传送了一个类型为 k 的信号， 内核就会设置 pending 中的第 k 位，而只要接收了一个类型为 k 的信号， 内核就会清除 pending 中的第 k 位。 

 由上面的讨论可知，信号是内核发送的或者通过内核发送的。 而内核是通过在进程上下文切换时，设置进程 PCB中的位向量中的某个二进制位发送信号给目的进程的。 所以不得不说一下进程的上下文切换。 

 内核为每个进程维持一个上下文（context）。上下文就是内核重新启动一个被抢占的进程所需要的状态。它由一些对象的值组成，这些对象包括通用目的寄存器，浮点寄存器，程序计数器，用户栈，状态寄存器，内核栈和各种内核数据结构，比如描绘地址空间的页表，包含有关当前进程信息的进程表，以及包含进程已打开文件的信息的文件表。 

 在进程执行的某些时刻，内核可以决定抢占当前进程，并重新开始一个先前被抢占的进程。这种决定就叫做调度（schedule），是由内核中称为调度器（scheduler）的代码处理的。 当内核选择一个新的进程运行时，我们就说内核调度了这个进程。在内核调度了一个新的进程运行后，它就抢占当前进程，并使用一种称为上下文切换的机制来将控制转移到新进程。上下文切换 1）保存当前进程的上下文 2）恢复某个先前被抢占的进程被保存的上下文，3）将控制传递给这个新恢复的进程。 

 当内核代表用户执行系统调用时， 可能会发生上下文切换。如果系统调用因为等待某个事件发生而阻塞，那么内核可以让当前进程休眠，切换到另一个进程。比如，如果一个 read 系统调用请求一个磁盘访问， 内核可以选择执行上下文切换，运行另外一个进程，而不是等待数据从磁盘到达。另一个示例是 sleep系统调用，它显示的请求让调用进程休眠。一般而言，即使系统调用没有阻塞，内核也可以决定执行上下文切换，而不是将控制返回给调用进程。 
中断也可能引发上下文切换。 比如，所有的系统都有某种产生周期性定时器中断的机制，典型的为每 1 毫秒或每 10 毫秒。 每次发生定时器中断时，内核就能判定当前进程已经运行了足够长的时间了，并切换到一个新的进程。 


这样事情就变得很明了了，内核通过设置目的进程上下文中的 pending位向量发送信号给目的进程。 发送信号的进程通过系统调用切换进内核，并通过内核设置目的进程上下文中的 pending 位向量，从而实现向目的进程发送信号的目的。 

#### 参考资料

- 《深入理解计算机系统 原书2th》(CSAPP) 8章-异常控制流





